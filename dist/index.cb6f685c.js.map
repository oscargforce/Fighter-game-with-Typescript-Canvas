{"mappings":"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","sources":["src/config.ts","src/Movements.ts","src/Sprite.ts","src/Fighter.ts","src/hitbox-utils.ts","src/index.ts","src/Game.ts"],"sourcesContent":["export const config = {\n  canvasWidth: 1750,\n  canvasHeight: 900,\n  gravity: 0.7,\n  runSpeed: 5,\n  jumpSpeed: 20,\n  playerWidth: 50,\n  playerHeight: 150,\n  gameTimeInSeconds: 20,\n  wizardDmg: 3,\n  warriorDmg: 3,\n};\n","import { Position, Velocity } from \"./Sprites.types\";\nimport { config } from \"./config\";\nimport { Fighter } from \"./Fighter\";\n\nexport class Movements {\n  private position: Position;\n  private velocity: Velocity;\n  private lastKey: string;\n  private playerImageHeight: number;\n  private gravity: number;\n  private fighter: Fighter;\n  constructor(fighter: Fighter) {\n    this.position = fighter.position;\n    this.velocity = fighter.velocity;\n    this.lastKey = \"\";\n    this.playerImageHeight = 150;\n    this.gravity = config.gravity;\n    this.fighter = fighter;\n  }\n\n  private keys = {\n    a: { pressed: false },\n    d: { pressed: false },\n    arrowLeft: { pressed: false },\n    arrowRight: { pressed: false },\n    w: { pressed: false },\n    arrowUp: { pressed: false },\n  };\n\n  /**\n   * y axis\n   * -3 |\n   * -2 |\n   * -1 |\n   *  --|-----\n   * 1  |\n   * 2  |\n   * 3  |\n   *                ->\n   * this.position.y [] gives the top position of the rectangle.\n   * this.position.y + this.image.height gives the bottom location of the rectangle []\n   *                                                                              ->\n   * if rectangle bottom >= canvasHeight then you hit the bottom of the canvas image.\n   * If you want to the fighters to land in the middle of the canvas then you have to subtract x amount, example: config.canvasHeight - 200\n   *\n   */\n   falling(): void {\n    this.position.y += this.velocity.y;\n    if (\n      this.position.y + this.playerImageHeight + this.velocity.y >=\n      config.canvasHeight - 300\n    ) {\n      this.velocity.y = 0;\n    } else this.velocity.y += this.gravity;\n  }\n\n  private runToTheRight(): void {\n    this.position.x += this.velocity.x;\n  }\n\n  private runToTheLeft(): void {\n    this.position.x -= this.velocity.x;\n  }\n\n  private jump(): void {\n    this.velocity.y = -config.jumpSpeed;\n  }\n\n  update(): void {\n    this.falling();\n    if (this.keys.d.pressed && this.lastKey === \"d\") {\n      this.runToTheRight();\n      this.fighter.switchSprite(\"run\");\n    } else if (this.keys.a.pressed && this.lastKey === \"a\") {\n      this.runToTheLeft();\n      this.fighter.switchSprite(\"run\");\n    } else if (this.keys.arrowLeft.pressed && this.lastKey === \"ArrowLeft\") {\n      this.runToTheLeft();\n      this.fighter.switchSprite(\"run\");\n    } else if (this.keys.arrowRight && this.lastKey === \"ArrowRight\") {\n      this.runToTheRight();\n      this.fighter.switchSprite(\"run\");\n    } else this.fighter.switchSprite(\"idle\");\n\n    if (this.velocity.y < 0) this.fighter.switchSprite(\"jump\");\n    else if (this.velocity.y > 0) this.fighter.switchSprite(\"fall\");\n  }\n\n  movePlayer(event: KeyboardEvent): void {\n    switch (event.key) {\n      case \"d\":\n        this.keys.d.pressed = true;\n        this.lastKey = \"d\";\n        break;\n      case \"a\":\n        this.keys.a.pressed = true;\n        this.lastKey = \"a\";\n        break;\n      case \"w\":\n        this.jump();\n        break;\n    }\n  }\n\n  stopMovingPlayer(event: KeyboardEvent): void {\n    switch (event.key) {\n      case \"d\":\n        this.keys.d.pressed = false;\n        this.lastKey = \"\";\n        break;\n      case \"a\":\n        this.keys.d.pressed = false;\n        this.lastKey = \"\";\n        break;\n    }\n  }\n\n  moveEnemy(event: KeyboardEvent): void {\n    switch (event.key) {\n      case \"ArrowRight\":\n        this.keys.arrowRight.pressed = true;\n        this.lastKey = \"ArrowRight\";\n        break;\n      case \"ArrowLeft\":\n        this.keys.arrowLeft.pressed = true;\n        this.lastKey = \"ArrowLeft\";\n        break;\n      case \"ArrowUp\":\n        this.jump();\n        break;\n    }\n  }\n\n  stopMovingEnemy(event: KeyboardEvent): void {\n    switch (event.key) {\n      case \"ArrowRight\":\n        this.keys.arrowRight.pressed = false;\n        this.lastKey = \"\";\n        break;\n      case \"ArrowLeft\":\n        this.keys.arrowLeft.pressed = false;\n        this.lastKey = \"\";\n        break;\n    }\n  }\n}\n","import { canvas } from \"./index\";\nimport { Offset, Position, Sprites } from \"./Sprites.types\";\n\nexport class Sprite {\n  public image: HTMLImageElement;\n  protected numOfFrames: number;\n  readonly position: Position;\n  private scale: number;\n  private slowDownAnimation: number;\n  private elapsedFrames: number;\n  public currentFrame: number;\n  readonly imageOffset: Offset;\n\n  constructor(data: Sprites) {\n    this.position = data.position;\n    this.image = new Image();\n    this.image.src = data.imgSrc;\n    this.numOfFrames = data.numOfFrames;\n    this.scale = data.scale ? data.scale : 1;\n    this.slowDownAnimation = 5;\n    this.currentFrame = 0;\n    this.elapsedFrames = 0;\n    this.imageOffset = data.offset ? data.offset : { x: 0, y: 0 };\n  }\n\n  protected draw(): void {\n    canvas.drawImage(\n      this.image,\n      this.currentFrame * (this.image.width / this.numOfFrames), // gets the correct width for one frame of the png\n      0,\n      this.image.width / this.numOfFrames, // gets the first image of the png\n      this.image.height,\n      this.position.x - this.imageOffset.x,\n      this.position.y - this.imageOffset.y,\n      (this.image.width / this.numOfFrames) * this.scale, // increases the correct frame\n      this.image.height * this.scale\n    );\n  }\n\n  protected animateFrames(): void {\n    this.elapsedFrames++;\n    if (this.elapsedFrames % this.slowDownAnimation === 0) {\n      if (this.currentFrame < (this.numOfFrames - 1)) this.currentFrame++;\n      else this.currentFrame = 0;\n    }\n  }\n\n  update(): void {\n    this.draw();\n    this.animateFrames();\n  }\n}\n","import { config } from \"./config\";\nimport { Movements } from \"./Movements\";\nimport { Sprite } from \"./Sprite\";\nimport {\n  Fighters,\n  SpriteImages,\n  ImageNames,\n  Velocity,\n  AttackBox,\n} from \"./Sprites.types\";\n\nexport class Fighter extends Sprite {\n  readonly velocity: Velocity;\n  readonly movements: Movements;\n  private sprites: SpriteImages;\n  public isAttacking: boolean;\n  readonly attackBox: AttackBox;\n  public health: number;\n  public dead: boolean;\n\n  constructor(data: Fighters) {\n    super(data);\n    this.velocity = { x: config.runSpeed, y: config.jumpSpeed };\n    this.movements = new Movements(this);\n    this.sprites = data.sprites;\n    this.isAttacking = false;\n    this.attackBox = {\n      width: data.attackBox.width,\n      height: data.attackBox.height,\n      offset: data.attackBox.offset,\n      position: { x: this.position.x, y: this.position.y },\n    };\n    this.health = 100;\n    this.dead = false;\n\n    for (const sprite in this.sprites) {\n      this.sprites[sprite].image = new Image();\n      this.sprites[sprite].image!.src = this.sprites[sprite].imgSrc;\n    }\n  }\n\n  isDead(): boolean {\n    return this.health <= 0;\n  }\n\n  update(): void {\n    this.draw();\n    this.movements.update();\n    if (!this.dead) this.animateFrames();\n\n    this.attackBox.position.x = this.position.x + this.attackBox.offset.x; // Set attackbox ontop of the rectangle and make attack box face eachother.\n    this.attackBox.position.y = this.position.y + this.attackBox.offset.y;\n\n    // Unable the fighter to move through walls.\n    if (this.position.x <= 0) this.position.x = 0;\n\n    if (this.position.x + config.playerWidth >= config.canvasWidth)\n      this.position.x = config.canvasWidth - config.playerWidth;\n\n    if (this.position.y + config.playerHeight <= 0) {\n      this.position.y = 0 - config.playerHeight;\n      this.movements.falling();\n\n    }\n  }\n\n  attack(): void {\n    this.isAttacking = true;\n    this.switchSprite(\"attack\");\n  }\n\n  switchSprite(sprite: ImageNames): void {\n    // If player is dead, then dont switch to new sprite.\n    if (this.image === this.sprites.death.image) {\n      if (this.currentFrame === this.sprites.death.numOfFrames - 1)\n        this.dead = true;\n      return;\n    }\n    if (\n      this.image === this.sprites.takeHit.image &&\n      this.currentFrame < this.sprites.takeHit.numOfFrames - 1\n    )\n      // Override any sprite switches if player is attacking / taking hit.\n      return;\n    if (\n      this.image === this.sprites.attack.image &&\n      this.currentFrame < this.sprites.attack.numOfFrames - 1\n    )\n      return;\n\n    switch (sprite) {\n      case \"idle\":\n        this.setImage(\"idle\");\n        break;\n      case \"attack\":\n        this.setImage(\"attack\");\n        break;\n      case \"run\":\n        this.setImage(\"run\");\n        break;\n      case \"jump\":\n        this.setImage(\"jump\");\n        break;\n      case \"fall\":\n        this.setImage(\"fall\");\n        break;\n      case \"takeHit\":\n        this.setImage(\"takeHit\");\n        break;\n      case \"death\":\n        this.setImage(\"death\");\n        break;\n    }\n  }\n\n  private setImage(img: ImageNames): void {\n    if (this.sprites?.[img] && this.image != this.sprites[img].image) {\n      this.image = this.sprites[img].image as HTMLImageElement;\n      this.numOfFrames = this.sprites[img].numOfFrames;\n      this.currentFrame = 0;\n    }\n  }\n}\n","import { Fighter } from \"./Fighter\";\nimport { config } from \"./config\";\n\nexport function isInsideHitBox(player: Fighter, enemy: Fighter): boolean {\n  return (\n    isWithinRange(player, enemy) &&\n    notMovedPassedEnemey(player, enemy) &&\n    isNotAboveEnemy(player, enemy)\n  );\n}\n\nfunction isWithinRange(player: Fighter, enemy: Fighter): boolean {\n  return (\n    player.attackBox.position.x + player.attackBox.width >= enemy.position.x\n  );\n}\n\nfunction notMovedPassedEnemey(player: Fighter, enemy: Fighter): boolean {\n  return player.attackBox.position.x <= enemy.position.x + config.playerWidth;\n}\n\nfunction isNotAboveEnemy(player: Fighter, enemy: Fighter): boolean {\n  return (\n    player.attackBox.position.y + player.attackBox.height >= enemy.position.y &&\n    player.attackBox.position.y <= enemy.position.y + (config.playerHeight + enemy.image.height)\n  );\n}\n\nexport function playerMisses(player: Fighter, currentFrame: number): boolean {\n  return player.isAttacking && player.currentFrame === currentFrame;\n}\n","import { config } from \"./config\";\nimport { Fighter } from \"./Fighter\";\nimport { Game } from \"./Game\";\nimport { isInsideHitBox, playerMisses } from \"./hitbox-utils\";\nimport { Sprite } from \"./Sprite\";\n\nconst canvasElement = document.getElementById(\n  \"gameWindow\"\n) as HTMLCanvasElement;\n\nexport const canvas = canvasElement.getContext(\n  \"2d\"\n) as CanvasRenderingContext2D;\n\ncanvasElement.width = config.canvasWidth;\ncanvasElement.height = config.canvasHeight;\n\ncanvas.fillRect(0, 0, canvasElement.width, canvasElement.height);\n\nconst background = new Sprite({\n  imgSrc: \"images/Battleground3.png\",\n  numOfFrames: 1,\n  position: { x: 0, y: 0 },\n});\n\nconst wizard = new Fighter({\n  imgSrc: \"images/Evil-Wizard/idle.png\",\n  numOfFrames: 8,\n  offset: { x: 200, y: 0 },\n  position: { x: 0, y: 0 },\n  scale: 3,\n  sprites: {\n    idle: { numOfFrames: 8, imgSrc: \"images/Evil-Wizard/Idle.png\" },\n    attack: { numOfFrames: 8, imgSrc: \"images/Evil-Wizard/Attack.png\" },\n    run: { numOfFrames: 8, imgSrc: \"images/Evil-Wizard/Move.png\" },\n    takeHit: { numOfFrames: 4, imgSrc: \"images/Evil-Wizard/Take-Hit.png\" },\n    death: { numOfFrames: 5, imgSrc: \"images/Evil-Wizard/Death.png\" },\n  },\n  attackBox: { height: 50, width: 175, offset: { x: 20, y: 200 } },\n});\n\nconst warrior = new Fighter({\n  imgSrc: \"images/fantasy-warrior/Idle.png\",\n  numOfFrames: 10,\n  position: { x: 600, y: 0 },\n  offset: { x: 200, y: 0 },\n  scale: 3,\n  sprites: {\n    idle: {\n      numOfFrames: 10,\n      imgSrc: \"images/fantasy-warrior/Idle.png\",\n    },\n    attack: {\n      numOfFrames: 7,\n      imgSrc: \"images/fantasy-warrior/Attack1.png\",\n    },\n    run: { numOfFrames: 8, imgSrc: \"images/fantasy-warrior/Run.png\" },\n    jump: { numOfFrames: 3, imgSrc: \"images/fantasy-warrior/Jump.png\" },\n    fall: { numOfFrames: 3, imgSrc: \"images/fantasy-warrior/Fall.png\" },\n    takeHit: { numOfFrames: 3, imgSrc: \"images/fantasy-warrior/Take-Hit.png\" },\n    death: { numOfFrames: 7, imgSrc: \"images/fantasy-warrior/Death.png\" },\n  },\n  attackBox: { height: 40, width: 130, offset: { x: -95, y: 200 } },\n});\n\nconst game = new Game(wizard, warrior);\n\nfunction animate() {\n  window.requestAnimationFrame(animate);\n  background.update();\n  wizard.update();\n  warrior.update();\n\n  if (isInsideHitBox(wizard, warrior) && wizard.isAttacking) {\n    wizard.isAttacking = false;\n    if (warrior.isDead()) warrior.switchSprite(\"death\");\n    else warrior.switchSprite(\"takeHit\");\n\n    document.getElementById(\n      \"enemy-health-left\"\n    )!.style.width = `${(warrior.health -= config.wizardDmg)}%`;\n  }\n\n  if (isInsideHitBox(warrior, wizard) && warrior.isAttacking) {\n    warrior.isAttacking = false;\n    if (wizard.isDead()) wizard.switchSprite(\"death\");\n    else wizard.switchSprite(\"takeHit\");\n\n    document.getElementById(\n      \"player-health-left\"\n    )!.style.width = `${(wizard.health -= config.warriorDmg)}%`;\n  }\n\n  if (playerMisses(warrior, 6)) warrior.isAttacking = false;\n  if (playerMisses(wizard, 7)) wizard.isAttacking = false;\n  \n  if (warrior.isDead() || wizard.isDead()) {\n    game.determineTheWinner();\n  }\n}\n\nanimate();\ngame.decreaseGameTime();\n\nwindow.addEventListener(\"keydown\", (e) => {\n  if (!wizard.dead) {\n    wizard.movements.movePlayer(e);\n    if (e.key === \"s\") {\n      wizard.attack();\n    }\n  }\n\n  if (!warrior.dead) {\n    warrior.movements.moveEnemy(e);\n    if (e.key === \"ArrowDown\") {\n      warrior.attack();\n    }\n  }\n});\n\nwindow.addEventListener(\"keyup\", (e) => {\n  wizard.movements.stopMovingPlayer(e);\n  warrior.movements.stopMovingEnemy(e);\n});\n","import { config } from \"./config\";\nimport { Fighter } from \"./Fighter\";\n\nexport class Game {\n  private timerElement: HTMLElement;\n  private gameResultElement: HTMLElement;\n  private wizard: Fighter;\n  private warrior: Fighter;\n\n  constructor(wizard: Fighter, warrior: Fighter) {\n    this.timerElement = document.getElementById(\"timer\")!;\n    this.gameResultElement = document.getElementById(\"game-result\")!;\n    this.timerElement.textContent = `${config.gameTimeInSeconds}`;\n    this.wizard = wizard;\n    this.warrior = warrior;\n  }\n\n  decreaseGameTime(): void {\n    if (config.gameTimeInSeconds >= 0) {\n      setTimeout(this.decreaseGameTime.bind(this), 1000);\n      this.timerElement.textContent = `${config.gameTimeInSeconds--}`;\n    } else if (config.gameTimeInSeconds <= 0) this.determineTheWinner();\n  }\n\n  private gameOver(): void {\n    this.timerElement.textContent = `Game Over`;\n  }\n  private fantasyWarriorWon(): void {\n    this.gameResultElement.textContent = `Fantasy warrior won!`;\n    this.gameResultElement.style.display = \"flex\";\n  }\n\n  private wizardWon(): void {\n    this.gameResultElement.textContent = `The evil wizard won!`;\n    this.gameResultElement.style.display = \"flex\";\n  }\n\n  private tiedGame(): void {\n    this.gameResultElement.textContent = `Its a tie!`;\n    this.gameResultElement.style.display = \"flex\";\n  }\n\n  determineTheWinner(): void {\n    this.gameOver();\n    if (this.wizard.health === this.warrior.health) this.tiedGame();\n    else if (this.wizard.health < this.warrior.health) this.fantasyWarriorWon();\n    else if (this.wizard.health > this.warrior.health) this.wizardWon();\n  }\n}\n"],"names":["$9d936a2aecb96285$export$e506a1d27d1eaa20","canvasWidth","canvasHeight","gravity","runSpeed","jumpSpeed","playerWidth","playerHeight","gameTimeInSeconds","wizardDmg","warriorDmg","$3838a2bad7286565$export$4a067e58640ae331","constructor","fighter","this","position","velocity","lastKey","playerImageHeight","keys","a","pressed","d","arrowLeft","arrowRight","w","arrowUp","falling","y","runToTheRight","x","runToTheLeft","jump","update","switchSprite","movePlayer","event","key","stopMovingPlayer","moveEnemy","stopMovingEnemy","$2e05ba0f314fe3e0$export$3075603db8e6204c","data","image","Image","src","imgSrc","numOfFrames","scale","slowDownAnimation","currentFrame","elapsedFrames","imageOffset","offset","draw","$b4e14b6b8da86996$export$67ea982130081db","drawImage","width","height","animateFrames","$f47ff0b416c5b7c5$export$c7b2d994a4a4d4ef","super","movements","sprites","isAttacking","attackBox","health","dead","sprite","isDead","attack","death","takeHit","setImage","img","$148bc98d62c57861$export$280bda45d48008e8","player","enemy","$148bc98d62c57861$var$isWithinRange","$148bc98d62c57861$var$notMovedPassedEnemey","$148bc98d62c57861$var$isNotAboveEnemy","$148bc98d62c57861$export$a5f569e33727d5fa","$b4e14b6b8da86996$var$canvasElement","document","getElementById","getContext","fillRect","$b4e14b6b8da86996$var$background","$b4e14b6b8da86996$var$wizard","idle","run","$b4e14b6b8da86996$var$warrior","fall","$b4e14b6b8da86996$var$game","wizard","warrior","timerElement","gameResultElement","textContent","decreaseGameTime","setTimeout","bind","determineTheWinner","gameOver","fantasyWarriorWon","style","display","wizardWon","tiedGame","$b4e14b6b8da86996$var$animate","window","requestAnimationFrame","addEventListener","e"],"version":3,"file":"index.cb6f685c.js.map"}